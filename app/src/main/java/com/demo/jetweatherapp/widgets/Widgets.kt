package com.demo.jetweatherapp.widgetsimport androidx.compose.foundation.Imageimport androidx.compose.foundation.layout.*import androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.shape.CornerSizeimport androidx.compose.material3.Iconimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Surfaceimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.SpanStyleimport androidx.compose.ui.text.buildAnnotatedStringimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.withStyleimport androidx.compose.ui.unit.dpimport coil.compose.rememberAsyncImagePainterimport com.demo.jetweatherapp.Rimport com.demo.jetweatherapp.model.WeatherItemimport com.demo.jetweatherapp.ui.theme.MyPrimaryColorimport com.demo.jetweatherapp.utils.formatDateimport com.demo.jetweatherapp.utils.formatDateTimeimport com.demo.jetweatherapp.utils.formatDecimals@Composablefun WeatherDetailRow(weatherItem: WeatherItem) {    val imagesUrl = "https://openweathermap.org/img/wn/${weatherItem.weather[0].icon}.png"    Surface(        modifier = Modifier            .padding(3.dp)            .fillMaxWidth(),        shape = CircleShape.copy(topEnd = CornerSize(6.dp)),        //color = MaterialTheme.colorScheme.background    ) {        Row(            modifier = Modifier.fillMaxWidth(),            verticalAlignment = Alignment.CenterVertically,            horizontalArrangement = Arrangement.SpaceBetween        ) {            Text(                formatDate(weatherItem.dt).split(",")[0],                modifier = Modifier.padding(start = 5.dp)            )            WeatherStateImage(imageUrl = imagesUrl)            Surface(                modifier = Modifier.padding(0.dp),                shape = CircleShape,                color = MyPrimaryColor            ) {                Text(                    text = weatherItem.weather[0].description, modifier = Modifier.padding(4.dp),                    style = MaterialTheme.typography.bodyMedium                )            }            Text(text = buildAnnotatedString {                withStyle(                    style = SpanStyle(                        color = MaterialTheme.colorScheme.primary,                        fontWeight = FontWeight.SemiBold                    )                ) {                    append(formatDecimals(weatherItem.temp.max) + "ยบ")                }                withStyle(                    style = SpanStyle(                        color = MaterialTheme.colorScheme.primary.copy(alpha = 0.4f),                        fontWeight = FontWeight.SemiBold                    )                ){                    append(formatDecimals(weatherItem.temp.min) + "ยบ")                }            })        }    }}@Composablefun SunsetSunRiseRow(weather: WeatherItem) {    Row(        modifier = Modifier            .fillMaxWidth()            .padding(top = 16.dp, bottom = 8.dp),        horizontalArrangement = Arrangement.SpaceBetween,        verticalAlignment = Alignment.CenterVertically    ) {        Row {            Image(                painter = painterResource(id = R.drawable.sunrise),                contentDescription = "Sunrise",                modifier = Modifier.size(30.dp)            )            Text(                text = formatDateTime(weather.sunrise),                style = MaterialTheme.typography.bodyLarge            )        }        Row {            Text(                text = formatDateTime(weather.sunset),                style = MaterialTheme.typography.bodyLarge            )            Image(                painter = painterResource(id = R.drawable.sunset),                contentDescription = "Sunset",                modifier = Modifier.size(30.dp)            )        }    }}@Composablefun HumidityWindPressureRow(weather: WeatherItem, isImperial: Boolean) {    Row(        modifier = Modifier            .padding(12.dp)            .fillMaxWidth(),        verticalAlignment = Alignment.CenterVertically,        horizontalArrangement = Arrangement.SpaceBetween    ) {        Row(modifier = Modifier.padding(4.dp)) {            Icon(                painter = painterResource(id = R.drawable.humidity),                contentDescription = "humidity icon",                modifier = Modifier.size(20.dp)            )            Text(                text = "${weather.humidity}%",                style = MaterialTheme.typography.bodyLarge            )        }        Row() {            Icon(                painter = painterResource(id = R.drawable.pressure),                contentDescription = "pressure icon",                modifier = Modifier.size(20.dp)            )            Text(                text = "${weather.pressure}psi",                style = MaterialTheme.typography.bodyLarge            )        }        Row() {            Icon(                painter = painterResource(id = R.drawable.wind),                contentDescription = "wind icon",                modifier = Modifier.size(20.dp)            )            Text(                text = "${formatDecimals(weather.speed)} " + if (isImperial) "mph" else "kmh",                style = MaterialTheme.typography.bodyLarge            )        }    }}@Composablefun WeatherStateImage(imageUrl: String) {    Image(        painter = rememberAsyncImagePainter(model = imageUrl),        contentDescription = "weather state icon",        modifier = Modifier.size(80.dp)    )}
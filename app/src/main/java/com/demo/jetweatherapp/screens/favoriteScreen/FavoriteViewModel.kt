package com.demo.jetweatherapp.screens.favoriteScreenimport android.util.Logimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.demo.jetweatherapp.model.Favoriteimport com.demo.jetweatherapp.repository.WeatherDbRepositoryimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.asStateFlowimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.distinctUntilChangedimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass FavoriteViewModel @Inject constructor(private val repository: WeatherDbRepository) :    ViewModel() {    private val _favList = MutableStateFlow<List<Favorite>>(emptyList())    private val favList = _favList.asStateFlow()    init {        viewModelScope.launch(Dispatchers.IO) {            repository.getFavorites().distinctUntilChanged().collect { listFavorites ->                if (listFavorites.isEmpty()) {                    Log.d("TAG", ": Empty favs")                } else {                    _favList.value = listFavorites                    Log.d("FAVs", ": ${favList.value}")                }            }        }    }    fun getFavorite(city: String) =        viewModelScope.launch { repository.getFavById(city) }    fun insertFavorite(favorite: Favorite) =        viewModelScope.launch { repository.insertFavorite(favorite) }    fun update(favorite: Favorite) =        viewModelScope.launch { repository.updateFavorite(favorite) }    fun removeAllFavorites() =        viewModelScope.launch { repository.deleteAllFavorites() }    fun removeFavorite(favorite: Favorite) =        viewModelScope.launch { repository.deleteFavorite(favorite) }}
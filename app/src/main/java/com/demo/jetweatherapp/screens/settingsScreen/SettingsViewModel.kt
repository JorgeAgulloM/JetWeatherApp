package com.demo.jetweatherapp.screens.settingsScreenimport android.util.Logimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport androidx.room.Insertimport com.demo.jetweatherapp.model.Unitimport com.demo.jetweatherapp.repository.WeatherDbRepositoryimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.asStateFlowimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.distinctUntilChangedimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass SettingsViewModel @Inject constructor(private val repository: WeatherDbRepository) :    ViewModel() {    private val _unitList = MutableStateFlow<List<Unit>>(emptyList())    val unitList = _unitList.asStateFlow()    init {        viewModelScope.launch(Dispatchers.IO) {            repository.getUnits().distinctUntilChanged()                .collect { listOfUnits ->                    if (listOfUnits.isEmpty()) {                        Log.d("TAG", "List of units: $listOfUnits")                    } else {                        _unitList.value = listOfUnits                    }                }        }    }    fun insertUnit(unit: Unit) = viewModelScope.launch { repository.insertUnit(unit) }    fun updateUnit(unit: Unit) = viewModelScope.launch { repository.updateUnit(unit) }    fun deleteAllUnits() = viewModelScope.launch { repository.deleteAllUnits() }    fun deleteUnit(unit: Unit) = viewModelScope.launch { repository.deleteUnit(unit) }}